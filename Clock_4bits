`include "constants.vams"
`include "disciplines.vams"

module counter4_NAND_tb (A, B, C, D, CLK, VDD, VSS);
  output A, B, C, D; electrical A, B, C, D;
  input  CLK;        electrical CLK;
  input  VDD, VSS;   electrical VDD, VSS;

  parameter real    tr   = 1n;
  parameter real    tdA  = 0n, tdB = 0n, tdC = 0n, tdD = 0n;
  parameter real    vtol = 1m,  ttol = 1p;
  parameter integer NPHASES = 16;

  integer phase;
  integer bits[0:3];     // bits[3]=A ... bits[0]=D
  real    tgt[0:3];
  real    Vth;
  integer i, k, gray;

  analog begin
    $bound_step(tr/20);
    Vth = V(VDD,VSS)/2.0;

    @(initial_step) begin
      phase = 0;
      for (i=0; i<4; i=i+1) begin
        bits[i] = 0;
        tgt[i]  = V(VSS);
      end
    end

    V(A) <+ transition(tgt[3], tdA, tr);
    V(B) <+ transition(tgt[2], tdB, tr);
    V(C) <+ transition(tgt[1], tdC, tr);
    V(D) <+ transition(tgt[0], tdD, tr);

    @(cross(V(CLK,VSS)-Vth, +1, ttol, vtol)) begin
      phase = phase + 1;
      if (phase >= NPHASES) phase = 0;

      if (phase < 8) begin
        // Gray 0..7: g = n ^ (n>>1)
        gray = phase ^ (phase >> 1);
        for (k=0; k<4; k=k+1)
          bits[k] = (gray >> k) & 1;
      end else begin
        // Binario 8..15: usar phase completo (no restar 8)
        for (k=0; k<4; k=k+1)
          bits[k] = (phase >> k) & 1;
      end

      for (k=0; k<4; k=k+1)
        tgt[k] = (bits[k] != 0) ? V(VDD) : V(VSS);
    end
  end
endmodule
